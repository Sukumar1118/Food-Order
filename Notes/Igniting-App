



# To ignite our app:
    npx parcel index.html
    -> npx means ‚Äòexecute using npm‚Äô
    -> index.html is the entry point.

# Hot Module Replacement (HMR):
    # It means that parcel will keep a track of all the files which you are updating.
    # There is File Watcher Algorithm (written in C++). It keeps track of all the files
        which are changing realtime and it tells the server to reload. These are all done by PARCEL.

# parcel-cache:
    # Parcel caches code all the time.
    # When we run the application, a build is created which takes some time in ms.
    # If we make any code changes and save the application, another build will be triggered which 
        might take even less time than the previous build. This reduction of time is due to parcel cache.
    # Parcel immediately loads the code from the cache every time there is a subsequent build.
    # On the very first build parcel creates a folder .parcelcache where it stores the caches in 
        binary codeformat.
    # Parcel gives faster build, faster developer experience because of caching.

# dist:
    # It keeps the files minified for us.
    # When bundler builds the app, the build goes into a folder called dist.
    # The /dist folder contains the minimized and optimised version the source code.
    # Along with the minified code, the /dist folder also comprises of all the compiled modules that 
        may or may not be used with other systems.

    # When we run command:
            npx parcel index.html
        -> This will create a faster development version of our project and serves it on the server.
    
    # When I tell parcel to make a production build:
            npx parcel build index.html
        -> It creates a lot of things, minify your file. And the parcel will build all the production 
            files to the dist folder.

# Parcel features at a glance:
    Hot Module Replacement (HMR)
    File Watcher Algorithm - C++
    Bundling
    Minify Code
    Cleaning our code
    Dev and production build
    Igniting Our App! ( Namaste-React ) 8
    Super fast build algorithm
    Image Optimization
    Caching while development
    Compression
    Compatible with older browser versions
    Https on dev
    Image Optimization
    Port No
    Consistency Hashing Algorithm
    Zero Config
    Tree Shaking

# Transitive Dependencies :
    # We have our package manager which takes care of our transitive dependencies of our code.
    # If we‚Äôve to build a production ready app which uses all optimisations 
        (like minify, bundling, compression, etc), we need to do all these.
    # But we can‚Äôt do this alone, we need some dependencies on it. Those dependencies are also 
        dependent on other dependencies.

# Browserslist:
    # Browserslist is a tool that specifies which browsers should be supported/compatible in your frontend app.
    # It makes our code compatible for a lot of browsers.
    In package.json file do:

# what is Tree Shaking?
   ‚óè Tree shaking is a process of removing the unwanted code that we do not use while developing 
        the application.
   ‚óè In computing, tree shaking is a dead code elimination technique that is applied when optimizing code.


=====================

###  What is `npm`?
   ‚óè npm is a package manager primarily for JavaSript.
   ‚óè npm actually has `no full form` but many places it is mentioned as `Node Package Manager`.
   ‚óè npm is world's largest software registry where developers(or many organizations) can share 
        or borrow packages for projects.

# Package Manager:
  ‚óè Package manager is a tool that helps to `manage the dependencies` in the Project.
  ‚óè It automates the process of `installing, upgrading & removing packages` and helps 
    to develop & miantain applications easily.
    EX: `npm`, `yarn` etc.

# Module:
   ‚óè A module is a `single file (or group of files)` containing JavaScript code that can be 
        exported and used in other files by importing it.
   ‚óè It `encapsulates related functionality`, for code organization and reusability.
   ‚óè You can define modules using `import and export` statements in JS(ES6 modules).

# Package:
   ‚óè A package is a `collection of modules` that are bundled together and distributed as 
        a single unit.
   ‚óè It includes a `package.json` file that contains `meta data`, `dependencies`, `versioning` etc.
   ‚óè It can be installed via package manager like `npm or yarn`.

# Library:
   ‚óè A library is a `collection of reusable code` that provides specific functionalities. 
   ‚óè It can be a `single module` or a `collection of modules (or a package)`.

# NOTE:
   ‚óè All above definitions are generic for module, package & library.
   ‚óè In `JS(or in npm ecosystem)`, these terminologies are used `interchangably`.
   EX: `React` is considered as both `package & library`.
        React is a library provide functionalities for building web apps.
        React is distributed as a npm package which can be installed via npm and
        it also has package.json file.

# CLI(Command Line Interface):
  ‚óè CLI is a tool that allows users to interact with programs via a comman line or terminal.
  ‚óè CLI takes input as text & responds with text as output unlike GUIs(no need of GUIs).

# CLI Tools:
  ‚óè CLI Tools are `command-line-based applications` instead of GUI to perform tasks in command
    prompt or terminal.
    EX: npm (npm install react),
        Git (git clone <repository-url>),
        Angular CLI (ng serve),
        Webpack CLI (webpack --config webpack.config.js)

   ‚óè `Uses`: 
        - They are `speed, flexible` and `ease of automation`.
        - They are more eficient to manage & streamline development process and manage apps.
        - Useful in managing `remote servers`, where GUIs may not be available or practical.

   ‚óè How to get `CLI Tools`?
   ‚óè `NPM`:   
        - npm, node from `Node.js`(.msi installer file).
        - npm is maintained by `Microsoft`(through its subsidiary `GitHub`) and 
            is an `open-source` tool.
   ‚óè `Git`: 
        - git, git bash from `Git`(.exe file).
        - Git is maintained by the `Linux Foundation` and is an `open-source` tool.

   ‚óè Both `npm & git` through CLI using `winget`(included in WIN 10, 11) or `Chocolatey`.

# Terminal:
   ‚óè Terminal in VS Code is an `integrated command-line interface` (CLI).
   ‚óè It allows you to execute commands directly within the editor, without switching 
        to an external terminal application.
        
    EX: powershell (Windows (available on macOS and Linux too)),
        command prompt (Windows),
        Git Bash (Cross-platform (part of Git for Windows)),
        Javascript debug terminal (Cross-platform, integrated with VS Code‚Äôs debugging environment).

# Git:
   ‚óè Git is `Version Control System` (VCS).
   ‚óè Command-line tool used for `tracking changes` in source code during development.
   ‚óè Provides features like `branching`, `merging`, `committing`, and `viewing history` etc.

# GitHub:
   ‚óè `Hosting service` for Git repositories & a `Web-based platform` for `project management`
        and community engagement.
   ‚óè UI for git and provides features such as `issue tracking`, `pull requests`, 
        and `collaboration tools`.
   ‚óè Similar platforms like GitHub: `GitLab`, `Bitbucket` etc.

# To make our app production ready what should we do?
   ‚óè `Minify our file` (Remove console logs, bundle things up).
   ‚óè `Need a server` to run things.

üì¢ NOTE: Minify ‚Äî> Optimization ‚Äî> Clean console ‚Äî> Bundle

# What is Parcel/Webpack? Why do we need it?
   ‚óè Parcel/Webpack is `module bundler`.
   ‚óè Used to `bundle and package` JS applications and their dependencies.

# Bundlers:
   ‚óè A bundler is a tool that `bundles & packages` our app into one or more output files.
        This optimized files can be shipped to production.
    Examples of Bundlers:
                    1. Webpack (create-react-app uses this bundler).
                    2. Parcel.
                    3. Vite.
   ‚óè Bundlers are packages.

# Configuring the Project:
   ‚óè `npm init`
   ‚óè It creates a package.json file.

# package.json:
   ‚óè Package.json file is a `configuration` for `NPM and the project`.
   ‚óè Install packages our project needs using: 
        `npm install <packageName>`.
   ‚óè Once package installation is complete, their versions and configuration related 
        information is stored as dependencies inside package.json file

# Now to install parcel we will do:
   ‚óè npm install -D parcel
   ‚óè Now we will get a `package-lock.json` file.

# package-lock.json:
   ‚óè Package-lock.json locks the `exact version` of packages being used in the project.
   ‚óè `npm install` - npm `automatically` creates or updates `package-lock.json` to 
        reflect any new dependencies or updates.
   ‚óè `Do not edit manually`, since it is automatically generated & `managed by npm`.     
   ‚óè package-lock.json ensures a `stable, consistent environment` by locking dependency versions,
        making npm installations reliable and predictable.

# Why should I not modify package-lock.json?
   ‚óè package-lock.json it is automatically generated and managed by npm to 
        `ensure dependency consistency`. 
   ‚óè Making manual changes to package-lock.json can cause `issues in dependency management`, 
        leading to potential `bugs or unexpected behaviors`.

# What is difference between package.json and package.lock.json?
   ‚óè In `package. json` we have information about `generic version` of installed packages.
   ‚óè In `package.lock.json` we have information about the `specific or exact version` of installed packages.

# What is node_modules?
   ‚óè All packages which are installed are like `database for the npm`.
   ‚óè node_modules folder is essential for `managing project dependencies locally`.
   ‚óè Every `dependency` in node_module will have its `package.json`.
   ‚óè Node modules are very heavy so we should always put this in `git ignore`.

# üì¢ NOTE: Never touch node_modules and package-lock.json

# What is .gitignore? What should we add and not add into it?
   ‚óè .gitignore file specifies files and directories that `Git should ignore` when
        `tracking changes` in a repository.

   ‚óè `Should add` to .gitignore:
    Ex: 1. Dependency folders like `node_modules` - these can be `regenerated` by like 
            npm using package.json.
        2. `Build output` files like `dist, build` etc.
        3. `Generated test` coverage reports like `coverage` etc.

   ‚óè `Should not add` to .gitignore:
    Ex: 1. `Core application code` (like .js, .py, .html files) should always be 
                tracked by Git.
        2. `Configuration files` like package.json, webpack.config.js etc.
        3. `Documentation files` and other important project files like  `README.md`,
                `LICENSE`, `.gitignore` etc.

# Is it a good idea to push node_modules that on git?
   ‚óè `No`, it‚Äôs generally not a good idea to push the node_modules folder to Git.
   ‚óè Adding node_modules to .gitignore and `excluding it from version` control is a 
        best practice.
   ‚óè It keeps the repository `lightweight and efficient`, because node_modules contains 
        not just dependencies mentioned in package.json and also it's `internal dependencies`.
   ‚óè Dependency information in package.json and package-lock.json ensures 
        `version consistency`.



‚óè - What is .parcel-cache
‚óè - What is npx ?
‚óè - What is difference between dependencies vs devDependencies
‚óè - What is Tree Shaking?
‚óè - What is Hot Module Replacement?
‚óè - List down your favourite 5 superpowers of Parcel and describe any 3 of them in your own words.

‚óè - What is the dist folder?
‚óè - What is browserlists
Read about dif bundlers: vite, webpack, parcel
‚óè Read about: ^ - caret and ~ - tilda
‚óè Read about Script types in html (MDN Docs)

# Project Assignment:
- In your existing project
‚óè - intialize npm into your repo
‚óè - install react and react-dom
‚óè - remove CDN links of react
‚óè - install parcel
‚óè - ignite your app with parcel
‚óè - add scripts for ‚Äústart‚Äù and ‚Äúbuild‚Äù with parcel commands
‚óè - add .gitignore file
‚óè - add browserlists
‚óè - build a production version of your code using parcel build


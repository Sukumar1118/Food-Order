# Tasks:

-> About CDN and uses.
-> Explore about "React", "ReactDOM" objects and some internals in console after adding react CDN in file.
-> Explore why two CDN files are required in React, why can't one?
-> Explore about react native and where it is used?
-> About DOM manipulation(complex operation) in react and other JS libs & frameworks.
-> About React createElement, object and render in React - what happens BTS?
-> About CORS in more detail at the end.

======================================

### React is Javascript library.

### About ReactJS CDN links:
### React:

    -> React is a core react library responsible for handling component structure, state and lifecycle.

### ReactDOM:

    -> React DOM library is responsible for rendering React compnents to DOM.

### Are both libraries required?:

    -> React can be used in multiple environments like:
         React native for mobile Apps where react DOM is not required. React provides core logic for
         handling components and react DOM deals with web specific operation like DOM manipulation.

    -> For web project both are required and for mobile Apps React DOM is not required. So, it's better
        split into two libraries and use it according to the requirements.

### React Native:

    -> React Native renders on native mobile components(like Android & IOS) rather than browser DOM.

    -> React Native relies on APIs provided by the react native to manage styling, layouts and
        interaction with components in mobile environment. It doesn't depend on web's DOM.

### Uses:

    -> React native can be used primarily for building Mobile Apps(like Android and IOS).
        It can be used for other plat forms like:
            1. Mobile Apps(IOS and Android).
            2. Windows & Mac OS desktop apps.
            3. TV platforms.
            4. React native web apps.

======================

### About CORS:
### CORS (Cross-Origin Resource Sharing):
    -> CORS is a browser security mechanism that restricts web pages from making requests to a different domain (origin) than the one currently loaded. It is meant to protect users by preventing malicious websites from making unauthorized requests on behalf of a user to different domains.

### Cross-Origin Requests:
    -> When you include resources such as a JavaScript file from a CDN in your React application, the browser treats it as a cross-origin request if the CDN's domain is different from your application's domain.

### CORS Policy:
    -> To allow cross-origin requests, the server (in this case, the CDN server) must implement a CORS policy by sending the appropriate HTTP headers in its responses.

### Access-Control-Allow-Origin:
    -> The `Access-Control-Allow-Origin` header specifies which domains are allowed to make requests to a resource. A value of `*` allows access from any domain, while specific domains can be allowed by specifying them (e.g., `https://example.com`).

### SOP (Same-Origin Policy):
    -> Same-Origin Policy is a security measure that restricts web pages served from one domain from        making requests to resources on another domain.

    -> CORS is an extension of SOP that allows cross-origin requests under certain conditions. SOP is enforced by the browser at various levels, including the network layer, JavaScript engine, and browser storage, ensuring resources are isolated and accessed only by scripts from the same origin.

=========================

### About "crossorigin" attribute:
    -> "crossorigin" attribute is often included in ReactJS or any other JS libraries loaded via CDN
        for security & performance issues.

1. ### Handling CORS (Cross-Origin Resource Sharing):
    -> To manage how browsers handle cross-origin requests like fetching resources from different            domains, protcol etc. Browsers should handle cross-origin requests in safe & secure way.

2. ### Ensure proper error handling: 
### Without the crossorigin Attribute
    -> Browsers can block detailed error messages when resources fail to load due to 
        cross-orogin issues without "crossorigin" attribute.

    -> When errors like CORS issue or a network failure occurs, 
        it gives generic meassage like:

    **This is a vague, unhelpful error. You have no idea why the script failed to load,
    whether it’s due to a CORS issue, network issue, or other reasons.**
    EX: Console Error: "Script Error."
        Network Panel: The status might show "Failed" or simply "Error."
    
### Without crossorigin Attribute
    -> Browsers will provide more detailed error information with "crossorigin" attribute.

    **This error clearly tells you the reason for the failure — the absence of the 
        Access-Control-Allow-Origin header, indicating a CORS policy violation.**
    EX: Access to Script at 'https://cdn.example.com/react.min.js' from origin 'https://yourdomain.com' 
        has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the 
        requested resource.

3. ### Subresource Integrity (SRI)
    -> If you use SRI to verify the integrity of the loaded resource i-e; to make sure it
        has not been tampered(or modifed by attackers), the "crossorigin" attribute is used.

    EX: <script src="https://cdnjs.cloudflare.com/ajax/libs/react/17.0.2/umd/react.production.min.js"
        integrity="sha384-3HezAURKObYs1WVq/a+3cCkHVm/8FDvLczHokgOG+GcUx1U9CFZCzLfzt9pKwqJG"
        crossorigin="anonymous"></script>
    